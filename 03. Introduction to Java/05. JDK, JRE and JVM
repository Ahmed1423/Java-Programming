JDK:

JDK stands for Java Development Kit. It is a software development kit that provides everything you want as a software developer
from writing java programs to executing it. 

It consists of

- JRE 
- Compiler
- Debugger 
- Java Doc 

JRE:

JRE stands for Java Runtime Environment. It is responsible for providing an environment to run java programs. 

It consists of

- JVM 
- Class Libraries (lang, util, io, Math etc)

It can only run programs, we cannot write anything with it. 

JVM: 

The JVM is an abstract computing machine that enables a computer to run Java programs.

It interprets Java bytecode, which is compiled from .java source files using the javac compiler.

Bytecode is platform-independent, and the JVM translates it into machine-specific instructions.

The JVM is composed of several key subsystems:

1. Class Loader Subsystem

    Loads .class files into memory.

    Performs:

        Loading: Reads bytecode.

        Linking: Verifies and prepares classes.

        Initialization: Executes static initializers.

    Types of class loaders:

        Bootstrap: Loads core Java classes (e.g., java.lang.*).

        Extension: Loads classes from jre/lib/ext.

        Application: Loads user-defined classes

2. Runtime Data Areas

These are memory regions used during execution:
Area	Purpose

- Method Area:	Stores class structures, method code, constants
- Heap:	Allocates objects and class instances
- Java Stack:	Stores frames for method calls, local variables
- PC Register:	Tracks current instruction for each thread
- Native Method Stack:	Supports native (non-Java) method execution

Each thread gets its own stack and PC register

3. Execution Engine

    Executes bytecode using:

        Interpreter: Reads and executes bytecode line-by-line.

        JIT Compiler: Converts frequently used bytecode into native machine code for speed

4. Native Interface

    Connects Java code with native libraries (e.g., C/C++ via JNI).

5. Garbage Collector

    Automatically manages memory by removing unused objects from the heap.

  

Java, ByteCode are platform independent.
JVM is platform dependent. 

JVM is an abstract machine meaning it's a specification that tells what to do, not how to do it. 
Vendors like Oracle, Open JDK will have their own JVM implementation.